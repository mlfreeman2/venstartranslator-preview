// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SensorMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021

#region Designer generated code

using Protobuf = Google.Protobuf;
using ProtobufCollections = Google.Protobuf.Collections;
using ProtobufReflection = Google.Protobuf.Reflection;

namespace Models.Protobuf
{

    /// <summary>Holder for reflection information generated from SensorMessage.proto</summary>
    public static partial class SensorMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for SensorMessage.proto</summary>
    public static ProtobufReflection::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static ProtobufReflection::FileDescriptor descriptor;

    static SensorMessageReflection() {
      byte[] descriptorData = System.Convert.FromBase64String(
          string.Concat(
            "ChNTZW5zb3JNZXNzYWdlLnByb3RvEgZzZW5zb3IaDG5hbm9wYi5wcm90byLc",
            "AwoESU5GTxIXCghzZXF1ZW5jZRgBIAIoDUIFkj8COBASFwoIc2Vuc29ySWQY",
            "AiACKA1CBZI/AjgIEhIKA21hYxgDIAIoCUIFkj8CCA0SFgoHZndNYWpvchgE",
            "IAIoDUIFkj8COAgSFgoHZndNaW5vchgFIAIoDUIFkj8COAgSJwoFbW9kZWwY",
            "BiACKA4yGC5zZW5zb3IuSU5GTy5TZW5zb3JNb2RlbBInCgVwb3dlchgHIAIo",
            "DjIYLnNlbnNvci5JTkZPLlBvd2VyU291cmNlEhMKBG5hbWUYCCABKAlCBZI/",
            "AggPEiUKBHR5cGUYCSABKA4yFy5zZW5zb3IuSU5GTy5TZW5zb3JUeXBlEhoK",
            "C3RlbXBlcmF0dXJlGAogASgNQgWSPwI4CBIWCgdiYXR0ZXJ5GAsgASgNQgWS",
            "PwI4CBIXCghodW1pZGl0eRgMIAEoDUIFkj8COAgiPQoKU2Vuc29yVHlwZRIL",
            "CgdPVVRET09SEAESCgoGUkVUVVJOEAISCgoGUkVNT1RFEAMSCgoGU1VQUExZ",
            "EAQiJQoLUG93ZXJTb3VyY2USCwoHQkFUVEVSWRABEgkKBVdJUkVEEAIiHQoL",
            "U2Vuc29yTW9kZWwSDgoKVEVNUFNFTlNPUhABIiEKClNFTlNPUk5BTUUSEwoE",
            "bmFtZRgIIAIoCUIFkj8CCA8iQgoKU0VOU09SREFUQRIaCgRpbmZvGAEgAigL",
            "Mgwuc2Vuc29yLklORk8SGAoJc2lnbmF0dXJlGAIgAigJQgWSPwIILSK3AQoK",
            "V0lGSUNPTkZJRxITCgRTU0lEGAEgAigJQgWSPwIIIBIcCg1zZWN1cml0eV90",
            "eXBlGAIgAigNQgWSPwI4CBITCgRkaGNwGAMgAigNQgWSPwI4CBIXCghwYXNz",
            "d29yZBgEIAEoCUIFkj8CCEASFAoMaXB2NF9hZGRyZXNzGAUgASgNEgwKBG1h",
            "c2sYBiABKA0SDwoHZ2F0ZXdheRgHIAEoDRITCgtkbnNfYWRkcmVzcxgIIAEo",
            "DSJJCg9XSUZJU0NBTlJFU1VMVFMSNgoRd2lmaV9zY2FuX3Jlc3VsdHMYASAD",
            "KAsyFC5zZW5zb3IuV0lGSVNDQU5JVEVNQgWSPwIQCiJhCgxXSUZJU0NBTklU",
            "RU0SEwoEU1NJRBgBIAIoCUIFkj8CCCASHAoNc2VjdXJpdHlfdHlwZRgCIAIo",
            "DUIFkj8COAgSHgoPc2lnbmFsX3N0cmVuZ3RoGAMgAigNQgWSPwI4CCKdAQoN",
            "RklSTVdBUkVDSFVOSxIXCghzZXF1ZW5jZRgBIAIoDUIFkj8COBASMAoEdHlw",
            "ZRgCIAIoDjIiLnNlbnNvci5GSVJNV0FSRUNIVU5LLkZpcm13YXJlVHlwZRIU",
            "CgRkYXRhGAMgAigMQgaSPwMIgAgiKwoMRmlybXdhcmVUeXBlEgoKBk1PRFVM",
            "RRACEg8KC1NFUlZJQ0VQQUNLEAMiaQoQRklSTVdBUkVDT01QTEVURRIXCghz",
            "ZXF1ZW5jZRgBIAIoDUIFkj8COBASFgoObW9kdWxlQ2hlY2tzdW0YAiACKA0S",
            "JAoUc2VydmljZVBhY2tTaWduYXR1cmUYAyABKAxCBpI/AwiAAiKIBAoNU2Vu",
            "c29yTWVzc2FnZRIvCgdjb21tYW5kGAEgAigOMh4uc2Vuc29yLlNlbnNvck1l",
            "c3NhZ2UuQ29tbWFuZHMSKAoKc2Vuc29ybmFtZRgpIAEoCzISLnNlbnNvci5T",
            "RU5TT1JOQU1FSAASKAoKc2Vuc29yZGF0YRgqIAEoCzISLnNlbnNvci5TRU5T",
            "T1JEQVRBSAASKAoKd2lmaWNvbmZpZxgsIAEoCzISLnNlbnNvci5XSUZJQ09O",
            "RklHSAASMgoPd2lmaXNjYW5yZXN1bHRzGC0gASgLMhcuc2Vuc29yLldJRklT",
            "Q0FOUkVTVUxUU0gAEi4KDWZpcm13YXJlY2h1bmsYLiABKAsyFS5zZW5zb3Iu",
            "RklSTVdBUkVDSFVOS0gAEjQKEGZpcm13YXJlY29tcGxldGUYLyABKAsyGC5z",
            "ZW5zb3IuRklSTVdBUkVDT01QTEVURUgAIqUBCghDb21tYW5kcxIRCg1TRVRT",
            "RU5TT1JOQU1FECkSDgoKU0VOU09SREFUQRAqEg4KClNFTlNPUlBBSVIQKxIO",
            "CgpXSUZJQ09ORklHECwSEwoPV0lGSVNDQU5SRVNVTFRTEC0SEQoNRklSTVdB",
            "UkVDSFVOSxAuEhQKEEZJUk1XQVJFQ09NUExFVEUQLxILCgdTVUNDRVNTEH4S",
            "CwoHRkFJTFVSRRB/QgYKBGRhdGE="));
      descriptor = ProtobufReflection::FileDescriptor.FromGeneratedCode(descriptorData,
          new ProtobufReflection::FileDescriptor[] { NanopbReflection.Descriptor, },
          new ProtobufReflection::GeneratedClrTypeInfo(null, null, new ProtobufReflection::GeneratedClrTypeInfo[] {
            new ProtobufReflection::GeneratedClrTypeInfo(typeof(INFO), INFO.Parser, new[]{ "Sequence", "SensorId", "Mac", "FwMajor", "FwMinor", "Model", "Power", "Name", "Type", "Temperature", "Battery", "Humidity" }, null, new[]{ typeof(INFO.Types.SensorType), typeof(INFO.Types.PowerSource), typeof(INFO.Types.SensorModel) }, null, null),
            new ProtobufReflection::GeneratedClrTypeInfo(typeof(SENSORNAME), SENSORNAME.Parser, new[]{ "Name" }, null, null, null, null),
            new ProtobufReflection::GeneratedClrTypeInfo(typeof(SENSORDATA), SENSORDATA.Parser, new[]{ "Info", "Signature" }, null, null, null, null),
            new ProtobufReflection::GeneratedClrTypeInfo(typeof(WIFICONFIG), WIFICONFIG.Parser, new[]{ "SSID", "SecurityType", "Dhcp", "Password", "Ipv4Address", "Mask", "Gateway", "DnsAddress" }, null, null, null, null),
            new ProtobufReflection::GeneratedClrTypeInfo(typeof(WIFISCANRESULTS), WIFISCANRESULTS.Parser, new[]{ "WifiScanResults" }, null, null, null, null),
            new ProtobufReflection::GeneratedClrTypeInfo(typeof(WIFISCANITEM), WIFISCANITEM.Parser, new[]{ "SSID", "SecurityType", "SignalStrength" }, null, null, null, null),
            new ProtobufReflection::GeneratedClrTypeInfo(typeof(FIRMWARECHUNK), FIRMWARECHUNK.Parser, new[]{ "Sequence", "Type", "Data" }, null, new[]{ typeof(FIRMWARECHUNK.Types.FirmwareType) }, null, null),
            new ProtobufReflection::GeneratedClrTypeInfo(typeof(FIRMWARECOMPLETE), FIRMWARECOMPLETE.Parser, new[]{ "Sequence", "ModuleChecksum", "ServicePackSignature" }, null, null, null, null),
            new ProtobufReflection::GeneratedClrTypeInfo(typeof(SensorMessage), SensorMessage.Parser, new[]{ "Command", "Sensorname", "Sensordata", "Wificonfig", "Wifiscanresults", "Firmwarechunk", "Firmwarecomplete" }, new[]{ "Data" }, new[]{ typeof(SensorMessage.Types.Commands) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///Sensor state
  /// </summary>
  public sealed partial class INFO : Protobuf::IMessage<INFO> {
    private static readonly Protobuf::MessageParser<INFO> _parser = new Protobuf::MessageParser<INFO>(() => new INFO());
    private Protobuf::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static Protobuf::MessageParser<INFO> Parser { get { return _parser; } }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static ProtobufReflection::MessageDescriptor Descriptor {
      get { return SensorMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    ProtobufReflection::MessageDescriptor Protobuf::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public INFO(INFO other) : this() {
      _hasBits0 = other._hasBits0;
      sequence_ = other.sequence_;
      sensorId_ = other.sensorId_;
      mac_ = other.mac_;
      fwMajor_ = other.fwMajor_;
      fwMinor_ = other.fwMinor_;
      model_ = other.model_;
      power_ = other.power_;
      name_ = other.name_;
      type_ = other.type_;
      temperature_ = other.temperature_;
      battery_ = other.battery_;
      humidity_ = other.humidity_;
      _unknownFields = Protobuf::UnknownFieldSet.Clone(other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public INFO Clone() {
      return new INFO(this);
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 1;
    private readonly static uint SequenceDefaultValue = 0;

    private uint sequence_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sequence {
      get { if ((_hasBits0 & 1) != 0) { return sequence_; } else { return SequenceDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sequence_ = value;
      }
    }
    /// <summary>Gets whether the "sequence" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSequence {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "sequence" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSequence() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sensorId" field.</summary>
    public const int SensorIdFieldNumber = 2;
    private readonly static uint SensorIdDefaultValue = 0;

    private uint sensorId_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SensorId {
      get { if ((_hasBits0 & 2) != 0) { return sensorId_; } else { return SensorIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        sensorId_ = value;
      }
    }
    /// <summary>Gets whether the "sensorId" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSensorId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "sensorId" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSensorId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "mac" field.</summary>
    public const int MacFieldNumber = 3;
    private readonly static string MacDefaultValue = "";

    private string mac_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mac {
      get { return mac_ ?? MacDefaultValue; }
      set {
        mac_ = Protobuf::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "mac" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMac {
      get { return mac_ != null; }
    }
    /// <summary>Clears the value of the "mac" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMac() {
      mac_ = null;
    }

    /// <summary>Field number for the "fwMajor" field.</summary>
    public const int FwMajorFieldNumber = 4;
    private readonly static uint FwMajorDefaultValue = 0;

    private uint fwMajor_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FwMajor {
      get { if ((_hasBits0 & 4) != 0) { return fwMajor_; } else { return FwMajorDefaultValue; } }
      set {
        _hasBits0 |= 4;
        fwMajor_ = value;
      }
    }
    /// <summary>Gets whether the "fwMajor" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFwMajor {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "fwMajor" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFwMajor() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "fwMinor" field.</summary>
    public const int FwMinorFieldNumber = 5;
    private readonly static uint FwMinorDefaultValue = 0;

    private uint fwMinor_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FwMinor {
      get { if ((_hasBits0 & 8) != 0) { return fwMinor_; } else { return FwMinorDefaultValue; } }
      set {
        _hasBits0 |= 8;
        fwMinor_ = value;
      }
    }
    /// <summary>Gets whether the "fwMinor" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFwMinor {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "fwMinor" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFwMinor() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 6;
    private readonly static INFO.Types.SensorModel ModelDefaultValue = INFO.Types.SensorModel.Tempsensor;

    private INFO.Types.SensorModel model_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public INFO.Types.SensorModel Model {
      get { if ((_hasBits0 & 16) != 0) { return model_; } else { return ModelDefaultValue; } }
      set {
        _hasBits0 |= 16;
        model_ = value;
      }
    }
    /// <summary>Gets whether the "model" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModel {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "model" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModel() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 7;
    private readonly static INFO.Types.PowerSource PowerDefaultValue = INFO.Types.PowerSource.Battery;

    private INFO.Types.PowerSource power_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public INFO.Types.PowerSource Power {
      get { if ((_hasBits0 & 32) != 0) { return power_; } else { return PowerDefaultValue; } }
      set {
        _hasBits0 |= 32;
        power_ = value;
      }
    }
    /// <summary>Gets whether the "power" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPower {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "power" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPower() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 8;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = Protobuf::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 9;
    private readonly static INFO.Types.SensorType TypeDefaultValue = INFO.Types.SensorType.Outdoor;

    private INFO.Types.SensorType type_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public INFO.Types.SensorType Type {
      get { if ((_hasBits0 & 64) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 10;
    private readonly static uint TemperatureDefaultValue = 0;

    private uint temperature_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Temperature {
      get { if ((_hasBits0 & 128) != 0) { return temperature_; } else { return TemperatureDefaultValue; } }
      set {
        _hasBits0 |= 128;
        temperature_ = value;
      }
    }
    /// <summary>Gets whether the "temperature" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTemperature {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "temperature" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTemperature() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "battery" field.</summary>
    public const int BatteryFieldNumber = 11;
    private readonly static uint BatteryDefaultValue = 0;

    private uint battery_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Battery {
      get { if ((_hasBits0 & 256) != 0) { return battery_; } else { return BatteryDefaultValue; } }
      set {
        _hasBits0 |= 256;
        battery_ = value;
      }
    }
    /// <summary>Gets whether the "battery" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBattery {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "battery" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBattery() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "humidity" field.</summary>
    public const int HumidityFieldNumber = 12;
    private readonly static uint HumidityDefaultValue = 0;

    private uint humidity_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Humidity {
      get { if ((_hasBits0 & 512) != 0) { return humidity_; } else { return HumidityDefaultValue; } }
      set {
        _hasBits0 |= 512;
        humidity_ = value;
      }
    }
    /// <summary>Gets whether the "humidity" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHumidity {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "humidity" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHumidity() {
      _hasBits0 &= ~512;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as INFO);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sequence != other.Sequence) return false;
      if (SensorId != other.SensorId) return false;
      if (Mac != other.Mac) return false;
      if (FwMajor != other.FwMajor) return false;
      if (FwMinor != other.FwMinor) return false;
      if (Model != other.Model) return false;
      if (Power != other.Power) return false;
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Temperature != other.Temperature) return false;
      if (Battery != other.Battery) return false;
      if (Humidity != other.Humidity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSequence) hash ^= Sequence.GetHashCode();
      if (HasSensorId) hash ^= SensorId.GetHashCode();
      if (HasMac) hash ^= Mac.GetHashCode();
      if (HasFwMajor) hash ^= FwMajor.GetHashCode();
      if (HasFwMinor) hash ^= FwMinor.GetHashCode();
      if (HasModel) hash ^= Model.GetHashCode();
      if (HasPower) hash ^= Power.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasTemperature) hash ^= Temperature.GetHashCode();
      if (HasBattery) hash ^= Battery.GetHashCode();
      if (HasHumidity) hash ^= Humidity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return Protobuf::JsonFormatter.ToDiagnosticString(this);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(Protobuf::CodedOutputStream output) {
      if (HasSequence) {
        output.WriteRawTag(8);
        output.WriteUInt32(Sequence);
      }
      if (HasSensorId) {
        output.WriteRawTag(16);
        output.WriteUInt32(SensorId);
      }
      if (HasMac) {
        output.WriteRawTag(26);
        output.WriteString(Mac);
      }
      if (HasFwMajor) {
        output.WriteRawTag(32);
        output.WriteUInt32(FwMajor);
      }
      if (HasFwMinor) {
        output.WriteRawTag(40);
        output.WriteUInt32(FwMinor);
      }
      if (HasModel) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Model);
      }
      if (HasPower) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Power);
      }
      if (HasName) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (HasType) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Type);
      }
      if (HasTemperature) {
        output.WriteRawTag(80);
        output.WriteUInt32(Temperature);
      }
      if (HasBattery) {
        output.WriteRawTag(88);
        output.WriteUInt32(Battery);
      }
      if (HasHumidity) {
        output.WriteRawTag(96);
        output.WriteUInt32(Humidity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSequence) {
        size += 1 + Protobuf::CodedOutputStream.ComputeUInt32Size(Sequence);
      }
      if (HasSensorId) {
        size += 1 + Protobuf::CodedOutputStream.ComputeUInt32Size(SensorId);
      }
      if (HasMac) {
        size += 1 + Protobuf::CodedOutputStream.ComputeStringSize(Mac);
      }
      if (HasFwMajor) {
        size += 1 + Protobuf::CodedOutputStream.ComputeUInt32Size(FwMajor);
      }
      if (HasFwMinor) {
        size += 1 + Protobuf::CodedOutputStream.ComputeUInt32Size(FwMinor);
      }
      if (HasModel) {
        size += 1 + Protobuf::CodedOutputStream.ComputeEnumSize((int) Model);
      }
      if (HasPower) {
        size += 1 + Protobuf::CodedOutputStream.ComputeEnumSize((int) Power);
      }
      if (HasName) {
        size += 1 + Protobuf::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasType) {
        size += 1 + Protobuf::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasTemperature) {
        size += 1 + Protobuf::CodedOutputStream.ComputeUInt32Size(Temperature);
      }
      if (HasBattery) {
        size += 1 + Protobuf::CodedOutputStream.ComputeUInt32Size(Battery);
      }
      if (HasHumidity) {
        size += 1 + Protobuf::CodedOutputStream.ComputeUInt32Size(Humidity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(INFO other) {
      if (other == null) {
        return;
      }
      if (other.HasSequence) {
        Sequence = other.Sequence;
      }
      if (other.HasSensorId) {
        SensorId = other.SensorId;
      }
      if (other.HasMac) {
        Mac = other.Mac;
      }
      if (other.HasFwMajor) {
        FwMajor = other.FwMajor;
      }
      if (other.HasFwMinor) {
        FwMinor = other.FwMinor;
      }
      if (other.HasModel) {
        Model = other.Model;
      }
      if (other.HasPower) {
        Power = other.Power;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasTemperature) {
        Temperature = other.Temperature;
      }
      if (other.HasBattery) {
        Battery = other.Battery;
      }
      if (other.HasHumidity) {
        Humidity = other.Humidity;
      }
      _unknownFields = Protobuf::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Protobuf::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = Protobuf::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sequence = input.ReadUInt32();
            break;
          }
          case 16: {
            SensorId = input.ReadUInt32();
            break;
          }
          case 26: {
            Mac = input.ReadString();
            break;
          }
          case 32: {
            FwMajor = input.ReadUInt32();
            break;
          }
          case 40: {
            FwMinor = input.ReadUInt32();
            break;
          }
          case 48: {
            Model = (INFO.Types.SensorModel) input.ReadEnum();
            break;
          }
          case 56: {
            Power = (INFO.Types.PowerSource) input.ReadEnum();
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
          case 72: {
            Type = (INFO.Types.SensorType) input.ReadEnum();
            break;
          }
          case 80: {
            Temperature = input.ReadUInt32();
            break;
          }
          case 88: {
            Battery = input.ReadUInt32();
            break;
          }
          case 96: {
            Humidity = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the INFO message type.</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SensorType {
        [ProtobufReflection::OriginalName("OUTDOOR")] Outdoor = 1,
        [ProtobufReflection::OriginalName("RETURN")] Return = 2,
        [ProtobufReflection::OriginalName("REMOTE")] Remote = 3,
        [ProtobufReflection::OriginalName("SUPPLY")] Supply = 4,
      }

      public enum PowerSource {
        [ProtobufReflection::OriginalName("BATTERY")] Battery = 1,
        [ProtobufReflection::OriginalName("WIRED")] Wired = 2,
      }

      public enum SensorModel {
        [ProtobufReflection::OriginalName("TEMPSENSOR")] Tempsensor = 1,
      }

    }
    #endregion

  }

  /// <summary>
  ///Used for setting sensor name
  /// </summary>
  public sealed partial class SENSORNAME : Protobuf::IMessage<SENSORNAME> {
    private static readonly Protobuf::MessageParser<SENSORNAME> _parser = new Protobuf::MessageParser<SENSORNAME>(() => new SENSORNAME());
    private Protobuf::UnknownFieldSet _unknownFields;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static Protobuf::MessageParser<SENSORNAME> Parser { get { return _parser; } }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static ProtobufReflection::MessageDescriptor Descriptor {
      get { return SensorMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    ProtobufReflection::MessageDescriptor Protobuf::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SENSORNAME() {
      OnConstruction();
    }

    partial void OnConstruction();

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SENSORNAME(SENSORNAME other) : this() {
      name_ = other.name_;
      _unknownFields = Protobuf::UnknownFieldSet.Clone(other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SENSORNAME Clone() {
      return new SENSORNAME(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 8;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = Protobuf::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SENSORNAME);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SENSORNAME other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return Protobuf::JsonFormatter.ToDiagnosticString(this);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(Protobuf::CodedOutputStream output) {
      if (HasName) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + Protobuf::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SENSORNAME other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      _unknownFields = Protobuf::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Protobuf::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = Protobuf::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 66: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Used for both pairing and the sensor data packet
  /// </summary>
  public sealed partial class SENSORDATA : Protobuf::IMessage<SENSORDATA> {
    private static readonly Protobuf::MessageParser<SENSORDATA> _parser = new Protobuf::MessageParser<SENSORDATA>(() => new SENSORDATA());
    private Protobuf::UnknownFieldSet _unknownFields;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static Protobuf::MessageParser<SENSORDATA> Parser { get { return _parser; } }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static ProtobufReflection::MessageDescriptor Descriptor {
      get { return SensorMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    ProtobufReflection::MessageDescriptor Protobuf::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SENSORDATA() {
      OnConstruction();
    }

    partial void OnConstruction();

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SENSORDATA(SENSORDATA other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      signature_ = other.signature_;
      _unknownFields = Protobuf::UnknownFieldSet.Clone(other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SENSORDATA Clone() {
      return new SENSORDATA(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private INFO info_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public INFO Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private readonly static string SignatureDefaultValue = "";

    private string signature_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signature {
      get { return signature_ ?? SignatureDefaultValue; }
      set {
        signature_ = Protobuf::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "signature" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSignature {
      get { return signature_ != null; }
    }
    /// <summary>Clears the value of the "signature" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSignature() {
      signature_ = null;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SENSORDATA);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SENSORDATA other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (HasSignature) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return Protobuf::JsonFormatter.ToDiagnosticString(this);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(Protobuf::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (HasSignature) {
        output.WriteRawTag(18);
        output.WriteString(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + Protobuf::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (HasSignature) {
        size += 1 + Protobuf::CodedOutputStream.ComputeStringSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SENSORDATA other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new INFO();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.HasSignature) {
        Signature = other.Signature;
      }
      _unknownFields = Protobuf::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Protobuf::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = Protobuf::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new INFO();
            }
            input.ReadMessage(Info);
            break;
          }
          case 18: {
            Signature = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WIFICONFIG : Protobuf::IMessage<WIFICONFIG> {
    private static readonly Protobuf::MessageParser<WIFICONFIG> _parser = new Protobuf::MessageParser<WIFICONFIG>(() => new WIFICONFIG());
    private Protobuf::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static Protobuf::MessageParser<WIFICONFIG> Parser { get { return _parser; } }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static ProtobufReflection::MessageDescriptor Descriptor {
      get { return SensorMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    ProtobufReflection::MessageDescriptor Protobuf::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WIFICONFIG() {
      OnConstruction();
    }

    partial void OnConstruction();

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WIFICONFIG(WIFICONFIG other) : this() {
      _hasBits0 = other._hasBits0;
      sSID_ = other.sSID_;
      securityType_ = other.securityType_;
      dhcp_ = other.dhcp_;
      password_ = other.password_;
      ipv4Address_ = other.ipv4Address_;
      mask_ = other.mask_;
      gateway_ = other.gateway_;
      dnsAddress_ = other.dnsAddress_;
      _unknownFields = Protobuf::UnknownFieldSet.Clone(other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WIFICONFIG Clone() {
      return new WIFICONFIG(this);
    }

    /// <summary>Field number for the "SSID" field.</summary>
    public const int SSIDFieldNumber = 1;
    private readonly static string SSIDDefaultValue = "";

    private string sSID_;
    /// <summary>
    ///32 bytes is the limit of SSID name length
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SSID {
      get { return sSID_ ?? SSIDDefaultValue; }
      set {
        sSID_ = Protobuf::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "SSID" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSSID {
      get { return sSID_ != null; }
    }
    /// <summary>Clears the value of the "SSID" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSSID() {
      sSID_ = null;
    }

    /// <summary>Field number for the "security_type" field.</summary>
    public const int SecurityTypeFieldNumber = 2;
    private readonly static uint SecurityTypeDefaultValue = 0;

    private uint securityType_;
    /// <summary>
    ///0 = none, 1 = WEP, 2 = WPA, 3 = WPA2
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecurityType {
      get { if ((_hasBits0 & 1) != 0) { return securityType_; } else { return SecurityTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        securityType_ = value;
      }
    }
    /// <summary>Gets whether the "security_type" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSecurityType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "security_type" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSecurityType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "dhcp" field.</summary>
    public const int DhcpFieldNumber = 3;
    private readonly static uint DhcpDefaultValue = 0;

    private uint dhcp_;
    /// <summary>
    ///0 = Static IP, 1 = DHCP, 2 = RFC3927 Link Local IP
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dhcp {
      get { if ((_hasBits0 & 2) != 0) { return dhcp_; } else { return DhcpDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dhcp_ = value;
      }
    }
    /// <summary>Gets whether the "dhcp" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDhcp {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "dhcp" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDhcp() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 4;
    private readonly static string PasswordDefaultValue = "";

    private string password_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_ ?? PasswordDefaultValue; }
      set {
        password_ = Protobuf::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "password" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPassword {
      get { return password_ != null; }
    }
    /// <summary>Clears the value of the "password" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPassword() {
      password_ = null;
    }

    /// <summary>Field number for the "ipv4_address" field.</summary>
    public const int Ipv4AddressFieldNumber = 5;
    private readonly static uint Ipv4AddressDefaultValue = 0;

    private uint ipv4Address_;
    /// <summary>
    ///4 bytes, ex. 192.168.1.1 == ipv4_address[0] 192, ipv4_address[1] 168, ipv4_address[2] 1, ipv4_address[3] 1
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ipv4Address {
      get { if ((_hasBits0 & 4) != 0) { return ipv4Address_; } else { return Ipv4AddressDefaultValue; } }
      set {
        _hasBits0 |= 4;
        ipv4Address_ = value;
      }
    }
    /// <summary>Gets whether the "ipv4_address" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIpv4Address {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "ipv4_address" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIpv4Address() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "mask" field.</summary>
    public const int MaskFieldNumber = 6;
    private readonly static uint MaskDefaultValue = 0;

    private uint mask_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mask {
      get { if ((_hasBits0 & 8) != 0) { return mask_; } else { return MaskDefaultValue; } }
      set {
        _hasBits0 |= 8;
        mask_ = value;
      }
    }
    /// <summary>Gets whether the "mask" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMask {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "mask" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMask() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "gateway" field.</summary>
    public const int GatewayFieldNumber = 7;
    private readonly static uint GatewayDefaultValue = 0;

    private uint gateway_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gateway {
      get { if ((_hasBits0 & 16) != 0) { return gateway_; } else { return GatewayDefaultValue; } }
      set {
        _hasBits0 |= 16;
        gateway_ = value;
      }
    }
    /// <summary>Gets whether the "gateway" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGateway {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "gateway" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGateway() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "dns_address" field.</summary>
    public const int DnsAddressFieldNumber = 8;
    private readonly static uint DnsAddressDefaultValue = 0;

    private uint dnsAddress_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DnsAddress {
      get { if ((_hasBits0 & 32) != 0) { return dnsAddress_; } else { return DnsAddressDefaultValue; } }
      set {
        _hasBits0 |= 32;
        dnsAddress_ = value;
      }
    }
    /// <summary>Gets whether the "dns_address" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDnsAddress {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "dns_address" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDnsAddress() {
      _hasBits0 &= ~32;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WIFICONFIG);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WIFICONFIG other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SSID != other.SSID) return false;
      if (SecurityType != other.SecurityType) return false;
      if (Dhcp != other.Dhcp) return false;
      if (Password != other.Password) return false;
      if (Ipv4Address != other.Ipv4Address) return false;
      if (Mask != other.Mask) return false;
      if (Gateway != other.Gateway) return false;
      if (DnsAddress != other.DnsAddress) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSSID) hash ^= SSID.GetHashCode();
      if (HasSecurityType) hash ^= SecurityType.GetHashCode();
      if (HasDhcp) hash ^= Dhcp.GetHashCode();
      if (HasPassword) hash ^= Password.GetHashCode();
      if (HasIpv4Address) hash ^= Ipv4Address.GetHashCode();
      if (HasMask) hash ^= Mask.GetHashCode();
      if (HasGateway) hash ^= Gateway.GetHashCode();
      if (HasDnsAddress) hash ^= DnsAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return Protobuf::JsonFormatter.ToDiagnosticString(this);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(Protobuf::CodedOutputStream output) {
      if (HasSSID) {
        output.WriteRawTag(10);
        output.WriteString(SSID);
      }
      if (HasSecurityType) {
        output.WriteRawTag(16);
        output.WriteUInt32(SecurityType);
      }
      if (HasDhcp) {
        output.WriteRawTag(24);
        output.WriteUInt32(Dhcp);
      }
      if (HasPassword) {
        output.WriteRawTag(34);
        output.WriteString(Password);
      }
      if (HasIpv4Address) {
        output.WriteRawTag(40);
        output.WriteUInt32(Ipv4Address);
      }
      if (HasMask) {
        output.WriteRawTag(48);
        output.WriteUInt32(Mask);
      }
      if (HasGateway) {
        output.WriteRawTag(56);
        output.WriteUInt32(Gateway);
      }
      if (HasDnsAddress) {
        output.WriteRawTag(64);
        output.WriteUInt32(DnsAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSSID) {
        size += 1 + Protobuf::CodedOutputStream.ComputeStringSize(SSID);
      }
      if (HasSecurityType) {
        size += 1 + Protobuf::CodedOutputStream.ComputeUInt32Size(SecurityType);
      }
      if (HasDhcp) {
        size += 1 + Protobuf::CodedOutputStream.ComputeUInt32Size(Dhcp);
      }
      if (HasPassword) {
        size += 1 + Protobuf::CodedOutputStream.ComputeStringSize(Password);
      }
      if (HasIpv4Address) {
        size += 1 + Protobuf::CodedOutputStream.ComputeUInt32Size(Ipv4Address);
      }
      if (HasMask) {
        size += 1 + Protobuf::CodedOutputStream.ComputeUInt32Size(Mask);
      }
      if (HasGateway) {
        size += 1 + Protobuf::CodedOutputStream.ComputeUInt32Size(Gateway);
      }
      if (HasDnsAddress) {
        size += 1 + Protobuf::CodedOutputStream.ComputeUInt32Size(DnsAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WIFICONFIG other) {
      if (other == null) {
        return;
      }
      if (other.HasSSID) {
        SSID = other.SSID;
      }
      if (other.HasSecurityType) {
        SecurityType = other.SecurityType;
      }
      if (other.HasDhcp) {
        Dhcp = other.Dhcp;
      }
      if (other.HasPassword) {
        Password = other.Password;
      }
      if (other.HasIpv4Address) {
        Ipv4Address = other.Ipv4Address;
      }
      if (other.HasMask) {
        Mask = other.Mask;
      }
      if (other.HasGateway) {
        Gateway = other.Gateway;
      }
      if (other.HasDnsAddress) {
        DnsAddress = other.DnsAddress;
      }
      _unknownFields = Protobuf::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Protobuf::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = Protobuf::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SSID = input.ReadString();
            break;
          }
          case 16: {
            SecurityType = input.ReadUInt32();
            break;
          }
          case 24: {
            Dhcp = input.ReadUInt32();
            break;
          }
          case 34: {
            Password = input.ReadString();
            break;
          }
          case 40: {
            Ipv4Address = input.ReadUInt32();
            break;
          }
          case 48: {
            Mask = input.ReadUInt32();
            break;
          }
          case 56: {
            Gateway = input.ReadUInt32();
            break;
          }
          case 64: {
            DnsAddress = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WIFISCANRESULTS : Protobuf::IMessage<WIFISCANRESULTS> {
    private static readonly Protobuf::MessageParser<WIFISCANRESULTS> _parser = new Protobuf::MessageParser<WIFISCANRESULTS>(() => new WIFISCANRESULTS());
    private Protobuf::UnknownFieldSet _unknownFields;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static Protobuf::MessageParser<WIFISCANRESULTS> Parser { get { return _parser; } }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static ProtobufReflection::MessageDescriptor Descriptor {
      get { return SensorMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    ProtobufReflection::MessageDescriptor Protobuf::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WIFISCANRESULTS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WIFISCANRESULTS(WIFISCANRESULTS other) : this() {
      wifiScanResults_ = other.wifiScanResults_.Clone();
      _unknownFields = Protobuf::UnknownFieldSet.Clone(other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WIFISCANRESULTS Clone() {
      return new WIFISCANRESULTS(this);
    }

    /// <summary>Field number for the "wifi_scan_results" field.</summary>
    public const int WifiScanResultsFieldNumber = 1;
    private static readonly Protobuf::FieldCodec<WIFISCANITEM> _repeated_wifiScanResults_codec
        = Protobuf::FieldCodec.ForMessage(10, WIFISCANITEM.Parser);
    private readonly ProtobufCollections::RepeatedField<WIFISCANITEM> wifiScanResults_ = new ProtobufCollections::RepeatedField<WIFISCANITEM>();
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtobufCollections::RepeatedField<WIFISCANITEM> WifiScanResults {
      get { return wifiScanResults_; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WIFISCANRESULTS);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WIFISCANRESULTS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!wifiScanResults_.Equals(other.wifiScanResults_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= wifiScanResults_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return Protobuf::JsonFormatter.ToDiagnosticString(this);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(Protobuf::CodedOutputStream output) {
      wifiScanResults_.WriteTo(output, _repeated_wifiScanResults_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += wifiScanResults_.CalculateSize(_repeated_wifiScanResults_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WIFISCANRESULTS other) {
      if (other == null) {
        return;
      }
      wifiScanResults_.Add(other.wifiScanResults_);
      _unknownFields = Protobuf::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Protobuf::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = Protobuf::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            wifiScanResults_.AddEntriesFrom(input, _repeated_wifiScanResults_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WIFISCANITEM : Protobuf::IMessage<WIFISCANITEM> {
    private static readonly Protobuf::MessageParser<WIFISCANITEM> _parser = new Protobuf::MessageParser<WIFISCANITEM>(() => new WIFISCANITEM());
    private Protobuf::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static Protobuf::MessageParser<WIFISCANITEM> Parser { get { return _parser; } }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static ProtobufReflection::MessageDescriptor Descriptor {
      get { return SensorMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    ProtobufReflection::MessageDescriptor Protobuf::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WIFISCANITEM() {
      OnConstruction();
    }

    partial void OnConstruction();

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WIFISCANITEM(WIFISCANITEM other) : this() {
      _hasBits0 = other._hasBits0;
      sSID_ = other.sSID_;
      securityType_ = other.securityType_;
      signalStrength_ = other.signalStrength_;
      _unknownFields = Protobuf::UnknownFieldSet.Clone(other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WIFISCANITEM Clone() {
      return new WIFISCANITEM(this);
    }

    /// <summary>Field number for the "SSID" field.</summary>
    public const int SSIDFieldNumber = 1;
    private readonly static string SSIDDefaultValue = "";

    private string sSID_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SSID {
      get { return sSID_ ?? SSIDDefaultValue; }
      set {
        sSID_ = Protobuf::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "SSID" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSSID {
      get { return sSID_ != null; }
    }
    /// <summary>Clears the value of the "SSID" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSSID() {
      sSID_ = null;
    }

    /// <summary>Field number for the "security_type" field.</summary>
    public const int SecurityTypeFieldNumber = 2;
    private readonly static uint SecurityTypeDefaultValue = 0;

    private uint securityType_;
    /// <summary>
    ///0 = none, 1 = WEP, 2 = WPA, 3 = WPA2
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SecurityType {
      get { if ((_hasBits0 & 1) != 0) { return securityType_; } else { return SecurityTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        securityType_ = value;
      }
    }
    /// <summary>Gets whether the "security_type" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSecurityType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "security_type" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSecurityType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "signal_strength" field.</summary>
    public const int SignalStrengthFieldNumber = 3;
    private readonly static uint SignalStrengthDefaultValue = 0;

    private uint signalStrength_;
    /// <summary>
    ///8 bit number, signal strength % (0-100)
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SignalStrength {
      get { if ((_hasBits0 & 2) != 0) { return signalStrength_; } else { return SignalStrengthDefaultValue; } }
      set {
        _hasBits0 |= 2;
        signalStrength_ = value;
      }
    }
    /// <summary>Gets whether the "signal_strength" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSignalStrength {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "signal_strength" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSignalStrength() {
      _hasBits0 &= ~2;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WIFISCANITEM);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WIFISCANITEM other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SSID != other.SSID) return false;
      if (SecurityType != other.SecurityType) return false;
      if (SignalStrength != other.SignalStrength) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSSID) hash ^= SSID.GetHashCode();
      if (HasSecurityType) hash ^= SecurityType.GetHashCode();
      if (HasSignalStrength) hash ^= SignalStrength.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return Protobuf::JsonFormatter.ToDiagnosticString(this);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(Protobuf::CodedOutputStream output) {
      if (HasSSID) {
        output.WriteRawTag(10);
        output.WriteString(SSID);
      }
      if (HasSecurityType) {
        output.WriteRawTag(16);
        output.WriteUInt32(SecurityType);
      }
      if (HasSignalStrength) {
        output.WriteRawTag(24);
        output.WriteUInt32(SignalStrength);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSSID) {
        size += 1 + Protobuf::CodedOutputStream.ComputeStringSize(SSID);
      }
      if (HasSecurityType) {
        size += 1 + Protobuf::CodedOutputStream.ComputeUInt32Size(SecurityType);
      }
      if (HasSignalStrength) {
        size += 1 + Protobuf::CodedOutputStream.ComputeUInt32Size(SignalStrength);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WIFISCANITEM other) {
      if (other == null) {
        return;
      }
      if (other.HasSSID) {
        SSID = other.SSID;
      }
      if (other.HasSecurityType) {
        SecurityType = other.SecurityType;
      }
      if (other.HasSignalStrength) {
        SignalStrength = other.SignalStrength;
      }
      _unknownFields = Protobuf::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Protobuf::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = Protobuf::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SSID = input.ReadString();
            break;
          }
          case 16: {
            SecurityType = input.ReadUInt32();
            break;
          }
          case 24: {
            SignalStrength = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FIRMWARECHUNK : Protobuf::IMessage<FIRMWARECHUNK> {
    private static readonly Protobuf::MessageParser<FIRMWARECHUNK> _parser = new Protobuf::MessageParser<FIRMWARECHUNK>(() => new FIRMWARECHUNK());
    private Protobuf::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static Protobuf::MessageParser<FIRMWARECHUNK> Parser { get { return _parser; } }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static ProtobufReflection::MessageDescriptor Descriptor {
      get { return SensorMessageReflection.Descriptor.MessageTypes[6]; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    ProtobufReflection::MessageDescriptor Protobuf::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIRMWARECHUNK() {
      OnConstruction();
    }

    partial void OnConstruction();

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIRMWARECHUNK(FIRMWARECHUNK other) : this() {
      _hasBits0 = other._hasBits0;
      sequence_ = other.sequence_;
      type_ = other.type_;
      data_ = other.data_;
      _unknownFields = Protobuf::UnknownFieldSet.Clone(other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIRMWARECHUNK Clone() {
      return new FIRMWARECHUNK(this);
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 1;
    private readonly static uint SequenceDefaultValue = 0;

    private uint sequence_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sequence {
      get { if ((_hasBits0 & 1) != 0) { return sequence_; } else { return SequenceDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sequence_ = value;
      }
    }
    /// <summary>Gets whether the "sequence" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSequence {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "sequence" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSequence() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static FIRMWARECHUNK.Types.FirmwareType TypeDefaultValue = FIRMWARECHUNK.Types.FirmwareType.Module;

    private FIRMWARECHUNK.Types.FirmwareType type_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIRMWARECHUNK.Types.FirmwareType Type {
      get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private readonly static Protobuf::ByteString DataDefaultValue = Protobuf::ByteString.Empty;

    private Protobuf::ByteString data_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Protobuf::ByteString Data {
      get { return data_ ?? DataDefaultValue; }
      set {
        data_ = Protobuf::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "data" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasData {
      get { return data_ != null; }
    }
    /// <summary>Clears the value of the "data" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      data_ = null;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIRMWARECHUNK);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIRMWARECHUNK other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sequence != other.Sequence) return false;
      if (Type != other.Type) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSequence) hash ^= Sequence.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasData) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return Protobuf::JsonFormatter.ToDiagnosticString(this);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(Protobuf::CodedOutputStream output) {
      if (HasSequence) {
        output.WriteRawTag(8);
        output.WriteUInt32(Sequence);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (HasData) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSequence) {
        size += 1 + Protobuf::CodedOutputStream.ComputeUInt32Size(Sequence);
      }
      if (HasType) {
        size += 1 + Protobuf::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasData) {
        size += 1 + Protobuf::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIRMWARECHUNK other) {
      if (other == null) {
        return;
      }
      if (other.HasSequence) {
        Sequence = other.Sequence;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasData) {
        Data = other.Data;
      }
      _unknownFields = Protobuf::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Protobuf::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = Protobuf::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sequence = input.ReadUInt32();
            break;
          }
          case 16: {
            Type = (FIRMWARECHUNK.Types.FirmwareType) input.ReadEnum();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FIRMWARECHUNK message type.</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum FirmwareType {
        [ProtobufReflection::OriginalName("MODULE")] Module = 2,
        [ProtobufReflection::OriginalName("SERVICEPACK")] Servicepack = 3,
      }

    }
    #endregion

  }

  public sealed partial class FIRMWARECOMPLETE : Protobuf::IMessage<FIRMWARECOMPLETE> {
    private static readonly Protobuf::MessageParser<FIRMWARECOMPLETE> _parser = new Protobuf::MessageParser<FIRMWARECOMPLETE>(() => new FIRMWARECOMPLETE());
    private Protobuf::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static Protobuf::MessageParser<FIRMWARECOMPLETE> Parser { get { return _parser; } }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static ProtobufReflection::MessageDescriptor Descriptor {
      get { return SensorMessageReflection.Descriptor.MessageTypes[7]; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    ProtobufReflection::MessageDescriptor Protobuf::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIRMWARECOMPLETE() {
      OnConstruction();
    }

    partial void OnConstruction();

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIRMWARECOMPLETE(FIRMWARECOMPLETE other) : this() {
      _hasBits0 = other._hasBits0;
      sequence_ = other.sequence_;
      moduleChecksum_ = other.moduleChecksum_;
      servicePackSignature_ = other.servicePackSignature_;
      _unknownFields = Protobuf::UnknownFieldSet.Clone(other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIRMWARECOMPLETE Clone() {
      return new FIRMWARECOMPLETE(this);
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 1;
    private readonly static uint SequenceDefaultValue = 0;

    private uint sequence_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sequence {
      get { if ((_hasBits0 & 1) != 0) { return sequence_; } else { return SequenceDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sequence_ = value;
      }
    }
    /// <summary>Gets whether the "sequence" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSequence {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "sequence" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSequence() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "moduleChecksum" field.</summary>
    public const int ModuleChecksumFieldNumber = 2;
    private readonly static uint ModuleChecksumDefaultValue = 0;

    private uint moduleChecksum_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ModuleChecksum {
      get { if ((_hasBits0 & 2) != 0) { return moduleChecksum_; } else { return ModuleChecksumDefaultValue; } }
      set {
        _hasBits0 |= 2;
        moduleChecksum_ = value;
      }
    }
    /// <summary>Gets whether the "moduleChecksum" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasModuleChecksum {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "moduleChecksum" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearModuleChecksum() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "servicePackSignature" field.</summary>
    public const int ServicePackSignatureFieldNumber = 3;
    private readonly static Protobuf::ByteString ServicePackSignatureDefaultValue = Protobuf::ByteString.Empty;

    private Protobuf::ByteString servicePackSignature_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Protobuf::ByteString ServicePackSignature {
      get { return servicePackSignature_ ?? ServicePackSignatureDefaultValue; }
      set {
        servicePackSignature_ = Protobuf::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "servicePackSignature" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServicePackSignature {
      get { return servicePackSignature_ != null; }
    }
    /// <summary>Clears the value of the "servicePackSignature" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServicePackSignature() {
      servicePackSignature_ = null;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FIRMWARECOMPLETE);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FIRMWARECOMPLETE other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sequence != other.Sequence) return false;
      if (ModuleChecksum != other.ModuleChecksum) return false;
      if (ServicePackSignature != other.ServicePackSignature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSequence) hash ^= Sequence.GetHashCode();
      if (HasModuleChecksum) hash ^= ModuleChecksum.GetHashCode();
      if (HasServicePackSignature) hash ^= ServicePackSignature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return Protobuf::JsonFormatter.ToDiagnosticString(this);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(Protobuf::CodedOutputStream output) {
      if (HasSequence) {
        output.WriteRawTag(8);
        output.WriteUInt32(Sequence);
      }
      if (HasModuleChecksum) {
        output.WriteRawTag(16);
        output.WriteUInt32(ModuleChecksum);
      }
      if (HasServicePackSignature) {
        output.WriteRawTag(26);
        output.WriteBytes(ServicePackSignature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSequence) {
        size += 1 + Protobuf::CodedOutputStream.ComputeUInt32Size(Sequence);
      }
      if (HasModuleChecksum) {
        size += 1 + Protobuf::CodedOutputStream.ComputeUInt32Size(ModuleChecksum);
      }
      if (HasServicePackSignature) {
        size += 1 + Protobuf::CodedOutputStream.ComputeBytesSize(ServicePackSignature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FIRMWARECOMPLETE other) {
      if (other == null) {
        return;
      }
      if (other.HasSequence) {
        Sequence = other.Sequence;
      }
      if (other.HasModuleChecksum) {
        ModuleChecksum = other.ModuleChecksum;
      }
      if (other.HasServicePackSignature) {
        ServicePackSignature = other.ServicePackSignature;
      }
      _unknownFields = Protobuf::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Protobuf::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = Protobuf::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sequence = input.ReadUInt32();
            break;
          }
          case 16: {
            ModuleChecksum = input.ReadUInt32();
            break;
          }
          case 26: {
            ServicePackSignature = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// Message Frame
  /// </summary>
  public sealed partial class SensorMessage : Protobuf::IMessage<SensorMessage> {
    private static readonly Protobuf::MessageParser<SensorMessage> _parser = new Protobuf::MessageParser<SensorMessage>(() => new SensorMessage());
    private Protobuf::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static Protobuf::MessageParser<SensorMessage> Parser { get { return _parser; } }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static ProtobufReflection::MessageDescriptor Descriptor {
      get { return SensorMessageReflection.Descriptor.MessageTypes[8]; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    ProtobufReflection::MessageDescriptor Protobuf::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorMessage(SensorMessage other) : this() {
      _hasBits0 = other._hasBits0;
      command_ = other.command_;
      switch (other.DataCase) {
        case DataOneofCase.Sensorname:
          Sensorname = other.Sensorname.Clone();
          break;
        case DataOneofCase.Sensordata:
          Sensordata = other.Sensordata.Clone();
          break;
        case DataOneofCase.Wificonfig:
          Wificonfig = other.Wificonfig.Clone();
          break;
        case DataOneofCase.Wifiscanresults:
          Wifiscanresults = other.Wifiscanresults.Clone();
          break;
        case DataOneofCase.Firmwarechunk:
          Firmwarechunk = other.Firmwarechunk.Clone();
          break;
        case DataOneofCase.Firmwarecomplete:
          Firmwarecomplete = other.Firmwarecomplete.Clone();
          break;
      }

      _unknownFields = Protobuf::UnknownFieldSet.Clone(other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorMessage Clone() {
      return new SensorMessage(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 1;
    private readonly static SensorMessage.Types.Commands CommandDefaultValue = SensorMessage.Types.Commands.Setsensorname;

    private SensorMessage.Types.Commands command_;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorMessage.Types.Commands Command {
      get { if ((_hasBits0 & 1) != 0) { return command_; } else { return CommandDefaultValue; } }
      set {
        _hasBits0 |= 1;
        command_ = value;
      }
    }
    /// <summary>Gets whether the "command" field is set</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCommand {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "command" field</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCommand() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "sensorname" field.</summary>
    public const int SensornameFieldNumber = 41;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SENSORNAME Sensorname {
      get { return dataCase_ == DataOneofCase.Sensorname ? (SENSORNAME) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Sensorname;
      }
    }

    /// <summary>Field number for the "sensordata" field.</summary>
    public const int SensordataFieldNumber = 42;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SENSORDATA Sensordata {
      get { return dataCase_ == DataOneofCase.Sensordata ? (SENSORDATA) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Sensordata;
      }
    }

    /// <summary>Field number for the "wificonfig" field.</summary>
    public const int WificonfigFieldNumber = 44;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WIFICONFIG Wificonfig {
      get { return dataCase_ == DataOneofCase.Wificonfig ? (WIFICONFIG) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Wificonfig;
      }
    }

    /// <summary>Field number for the "wifiscanresults" field.</summary>
    public const int WifiscanresultsFieldNumber = 45;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WIFISCANRESULTS Wifiscanresults {
      get { return dataCase_ == DataOneofCase.Wifiscanresults ? (WIFISCANRESULTS) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Wifiscanresults;
      }
    }

    /// <summary>Field number for the "firmwarechunk" field.</summary>
    public const int FirmwarechunkFieldNumber = 46;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIRMWARECHUNK Firmwarechunk {
      get { return dataCase_ == DataOneofCase.Firmwarechunk ? (FIRMWARECHUNK) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Firmwarechunk;
      }
    }

    /// <summary>Field number for the "firmwarecomplete" field.</summary>
    public const int FirmwarecompleteFieldNumber = 47;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FIRMWARECOMPLETE Firmwarecomplete {
      get { return dataCase_ == DataOneofCase.Firmwarecomplete ? (FIRMWARECOMPLETE) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Firmwarecomplete;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Sensorname = 41,
      Sensordata = 42,
      Wificonfig = 44,
      Wifiscanresults = 45,
      Firmwarechunk = 46,
      Firmwarecomplete = 47,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SensorMessage);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SensorMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      if (!object.Equals(Sensorname, other.Sensorname)) return false;
      if (!object.Equals(Sensordata, other.Sensordata)) return false;
      if (!object.Equals(Wificonfig, other.Wificonfig)) return false;
      if (!object.Equals(Wifiscanresults, other.Wifiscanresults)) return false;
      if (!object.Equals(Firmwarechunk, other.Firmwarechunk)) return false;
      if (!object.Equals(Firmwarecomplete, other.Firmwarecomplete)) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCommand) hash ^= Command.GetHashCode();
      if (dataCase_ == DataOneofCase.Sensorname) hash ^= Sensorname.GetHashCode();
      if (dataCase_ == DataOneofCase.Sensordata) hash ^= Sensordata.GetHashCode();
      if (dataCase_ == DataOneofCase.Wificonfig) hash ^= Wificonfig.GetHashCode();
      if (dataCase_ == DataOneofCase.Wifiscanresults) hash ^= Wifiscanresults.GetHashCode();
      if (dataCase_ == DataOneofCase.Firmwarechunk) hash ^= Firmwarechunk.GetHashCode();
      if (dataCase_ == DataOneofCase.Firmwarecomplete) hash ^= Firmwarecomplete.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return Protobuf::JsonFormatter.ToDiagnosticString(this);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(Protobuf::CodedOutputStream output) {
      if (HasCommand) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Command);
      }
      if (dataCase_ == DataOneofCase.Sensorname) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(Sensorname);
      }
      if (dataCase_ == DataOneofCase.Sensordata) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(Sensordata);
      }
      if (dataCase_ == DataOneofCase.Wificonfig) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(Wificonfig);
      }
      if (dataCase_ == DataOneofCase.Wifiscanresults) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(Wifiscanresults);
      }
      if (dataCase_ == DataOneofCase.Firmwarechunk) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(Firmwarechunk);
      }
      if (dataCase_ == DataOneofCase.Firmwarecomplete) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(Firmwarecomplete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCommand) {
        size += 1 + Protobuf::CodedOutputStream.ComputeEnumSize((int) Command);
      }
      if (dataCase_ == DataOneofCase.Sensorname) {
        size += 2 + Protobuf::CodedOutputStream.ComputeMessageSize(Sensorname);
      }
      if (dataCase_ == DataOneofCase.Sensordata) {
        size += 2 + Protobuf::CodedOutputStream.ComputeMessageSize(Sensordata);
      }
      if (dataCase_ == DataOneofCase.Wificonfig) {
        size += 2 + Protobuf::CodedOutputStream.ComputeMessageSize(Wificonfig);
      }
      if (dataCase_ == DataOneofCase.Wifiscanresults) {
        size += 2 + Protobuf::CodedOutputStream.ComputeMessageSize(Wifiscanresults);
      }
      if (dataCase_ == DataOneofCase.Firmwarechunk) {
        size += 2 + Protobuf::CodedOutputStream.ComputeMessageSize(Firmwarechunk);
      }
      if (dataCase_ == DataOneofCase.Firmwarecomplete) {
        size += 2 + Protobuf::CodedOutputStream.ComputeMessageSize(Firmwarecomplete);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SensorMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasCommand) {
        Command = other.Command;
      }
      switch (other.DataCase) {
        case DataOneofCase.Sensorname:
          if (Sensorname == null) {
            Sensorname = new SENSORNAME();
          }
          Sensorname.MergeFrom(other.Sensorname);
          break;
        case DataOneofCase.Sensordata:
          if (Sensordata == null) {
            Sensordata = new SENSORDATA();
          }
          Sensordata.MergeFrom(other.Sensordata);
          break;
        case DataOneofCase.Wificonfig:
          if (Wificonfig == null) {
            Wificonfig = new WIFICONFIG();
          }
          Wificonfig.MergeFrom(other.Wificonfig);
          break;
        case DataOneofCase.Wifiscanresults:
          if (Wifiscanresults == null) {
            Wifiscanresults = new WIFISCANRESULTS();
          }
          Wifiscanresults.MergeFrom(other.Wifiscanresults);
          break;
        case DataOneofCase.Firmwarechunk:
          if (Firmwarechunk == null) {
            Firmwarechunk = new FIRMWARECHUNK();
          }
          Firmwarechunk.MergeFrom(other.Firmwarechunk);
          break;
        case DataOneofCase.Firmwarecomplete:
          if (Firmwarecomplete == null) {
            Firmwarecomplete = new FIRMWARECOMPLETE();
          }
          Firmwarecomplete.MergeFrom(other.Firmwarecomplete);
          break;
      }

      _unknownFields = Protobuf::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Protobuf::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = Protobuf::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Command = (SensorMessage.Types.Commands) input.ReadEnum();
            break;
          }
          case 330: {
            SENSORNAME subBuilder = new SENSORNAME();
            if (dataCase_ == DataOneofCase.Sensorname) {
              subBuilder.MergeFrom(Sensorname);
            }
            input.ReadMessage(subBuilder);
            Sensorname = subBuilder;
            break;
          }
          case 338: {
            SENSORDATA subBuilder = new SENSORDATA();
            if (dataCase_ == DataOneofCase.Sensordata) {
              subBuilder.MergeFrom(Sensordata);
            }
            input.ReadMessage(subBuilder);
            Sensordata = subBuilder;
            break;
          }
          case 354: {
            WIFICONFIG subBuilder = new WIFICONFIG();
            if (dataCase_ == DataOneofCase.Wificonfig) {
              subBuilder.MergeFrom(Wificonfig);
            }
            input.ReadMessage(subBuilder);
            Wificonfig = subBuilder;
            break;
          }
          case 362: {
            WIFISCANRESULTS subBuilder = new WIFISCANRESULTS();
            if (dataCase_ == DataOneofCase.Wifiscanresults) {
              subBuilder.MergeFrom(Wifiscanresults);
            }
            input.ReadMessage(subBuilder);
            Wifiscanresults = subBuilder;
            break;
          }
          case 370: {
            FIRMWARECHUNK subBuilder = new FIRMWARECHUNK();
            if (dataCase_ == DataOneofCase.Firmwarechunk) {
              subBuilder.MergeFrom(Firmwarechunk);
            }
            input.ReadMessage(subBuilder);
            Firmwarechunk = subBuilder;
            break;
          }
          case 378: {
            FIRMWARECOMPLETE subBuilder = new FIRMWARECOMPLETE();
            if (dataCase_ == DataOneofCase.Firmwarecomplete) {
              subBuilder.MergeFrom(Firmwarecomplete);
            }
            input.ReadMessage(subBuilder);
            Firmwarecomplete = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SensorMessage message type.</summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Commands {
        [ProtobufReflection::OriginalName("SETSENSORNAME")] Setsensorname = 41,
        [ProtobufReflection::OriginalName("SENSORDATA")] Sensordata = 42,
        [ProtobufReflection::OriginalName("SENSORPAIR")] Sensorpair = 43,
        [ProtobufReflection::OriginalName("WIFICONFIG")] Wificonfig = 44,
        [ProtobufReflection::OriginalName("WIFISCANRESULTS")] Wifiscanresults = 45,
        [ProtobufReflection::OriginalName("FIRMWARECHUNK")] Firmwarechunk = 46,
        [ProtobufReflection::OriginalName("FIRMWARECOMPLETE")] Firmwarecomplete = 47,
        [ProtobufReflection::OriginalName("SUCCESS")] Success = 126,
        [ProtobufReflection::OriginalName("FAILURE")] Failure = 127,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
