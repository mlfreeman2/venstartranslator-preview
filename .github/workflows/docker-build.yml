name: Build and Push Docker Image

on:
  push:
    branches: [ main, beta ]
  pull_request:
    branches: [ main, beta ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore ../VenstarTranslator.sln
      working-directory: VenstarTranslator.Tests

    - name: Build
      run: dotnet build ../VenstarTranslator.sln --no-restore --configuration Release
      working-directory: VenstarTranslator.Tests

    - name: Run unit tests with coverage
      run: dotnet test VenstarTranslator.Tests.csproj --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
      working-directory: VenstarTranslator.Tests

    - name: Check for vulnerable packages
      run: dotnet list package --vulnerable --include-transitive
      continue-on-error: true

    - name: Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: VenstarTranslator.Tests/coverage/**/coverage.cobertura.xml
        badge: true
        fail_below_min: false
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate timestamp
      id: timestamp
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta')
      run: |
        echo "timestamp=$(TZ='America/New_York' date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT

    - name: Extract branch name
      id: branch
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta')
      run: |
        echo "name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ steps.branch.outputs.name }}-${{ steps.timestamp.outputs.timestamp }},enable=${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta') }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta') && 'linux/amd64,linux/arm64' || 'linux/amd64' }}
        push: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
